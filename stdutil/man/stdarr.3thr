.TH STDARR 3 "NOV 2000" "Stdutil Library" 

.SH "NAME"

stdarr, stdarr_construct, stdarr_copy_construct, stdarr_destruct, stdarr_size, stdarr_empty, stdarr_high_capacity, stdarr_low_capacity, stdarr_get_auto_alloc, stdarr_set_auto_alloc, stdarr_push_back, stdarr_pop_back, stdarr_multi_push_back, stdarr_multi_pop_back, stdarr_insert, stdarr_erase, stdarr_repeat_insert, stdarr_multi_insert, stdarr_multi_erase, stdarr_resize, stdarr_clear, stdarr_set_capacity, stdarr_reserve, stdarr_shrink_fit, stdarr_begin, stdarr_end, stdarr_last, stdarr_get, stdarr_max_size, stdarr_val_size \- operations on a stdarr, a resizable array data structure

.SH "SYNOPSIS"

.B "#include <stdutil/stdarr.h>"

.BI "stdarr " array " = STDARR_STATIC_CONSTRUCT(sizeof_val);"

.BI "int stdarr_construct(stdarr *" arr ", size_t " sizeof_val ");"

.BI "int stdarr_copy_construct(stdarr *" dst ", const stdarr *" src ");"

.BI "void stdarr_destruct(stdarr *" arr ");"

.BI "size_t stdarr_size(const stdarr *" arr ");"

.BI "stdbool stdarr_empty(const stdarr *" arr ");"

.BI "size_t stdarr_high_capacity(const stdarr *" arr ");"

.BI "size_t stdarr_low_capacity(const stdarr *" arr ");"

.BI "stdbool stdarr_get_auto_alloc(const stdarr *" arr ");"

.BI "void stdarr_set_auto_alloc(stdarr *" arr ", stdbool " use_auto_alloc ");"

.BI "int stdarr_push_back(stdarr *" arr ", const void *" val ");"

.BI "int stdarr_pop_back(stdarr *" arr ");"

.BI "int stdarr_multi_push_back(stdarr *" arr ", const void *" vals ", size_t " num_push ");"

.BI "int stdarr_multi_pop_back(stdarr *" arr ", size_t " num_pop ");"

.BI "stdarr_it *stdarr_insert(stdarr_it *" it ", const void *" val ");"

.BI "stdarr_it *stdarr_erase(stdarr_it *" it ");"

.BI "stdarr_it *stdarr_repeat_insert(stdarr_it *" it ", const void *" val ", size_t " num_times ");"

.BI "stdarr_it *stdarr_multi_insert(stdarr_it *" it ", const void *" vals ", size_t " num_insert ");"

.BI "stdarr_it *stdarr_multi_erase(stdarr_it *" it ", size_t " num_erase ");"

.BI "int stdarr_resize(stdarr *" arr ", size_t " num_elems ");"

.BI "int stdarr_clear(stdarr *" arr ");"

.BI "int stdarr_set_capacity(stdarr *" arr " , size_t " num_elems ");"

.BI "int stdarr_reserve(stdarr *" arr ", size_t " num_elems ");"

.BI "int stdarr_shrink_fit(stdarr *" arr ");"

.BI "stdarr_it *stdarr_begin(const stdarr *" arr ", stdarr_it *" it ");"

.BI "stdarr_it *stdarr_end(const stdarr *" arr ", stdarr_it *" it ");"

.BI "stdarr_it *stdarr_last(const stdarr *" arr ", stdarr_it *" it ");"

.BI "stdarr_it *stdarr_get(const stdarr *" arr ", stdarr_it *" it ", size_t " elem_num ");"

.BI "size_t stdarr_max_size(const stdarr *" arr ");"

.BI "size_t stdarr_val_size(const stdarr *" arr ");"

.SH "DESCRIPTION"

stdarr is a generic data structure that contains, by value, a user
defined sequence of same sized values. The values can be referenced in
constant O(1) time by their 0-based rank in the sequence. This data
structure is the equivalent of a resizable array or vector in other
languages. This structure is well suited to applications where
references to arbitrary points in a user defined sequence often occur.

Before a stdarr can legally be used it must be successfully
initialized.
.BI "STDARR_STATIC_CONSTRUCT(" sizeof_val ")"
is a macro that initializes the assigned stdarr at definition to
contain values of size
.I "sizeof_val"
bytes.
.B "stdarr_construct"
dynamically initializes the stdarr object pointed to by
.I "arr"
to contain values of size 
.I "sizeof_val"
bytes. Arrays initialized using either of these methods initially
contain no values.
.B "stdarr_copy_construct"
makes 
.I "dst"
contain a clone (copy by value) of the sequence of values that the
successfully initialized
.I "src"
array contains. The cloned array has the same operational parameters
(i.e. - sizeof_val, auto_alloc) as the source array. It is illegal to
call a constructor on an already successfully constructed stdarr --
doing so will cause memory leaks at best. When an array is no longer
in use its memory should be released by calling
.BR "stdarr_destruct"
on it. Once a stdarr has been destructed it must be initialized again
before being legally used.

.B "stdarr_size"
indicates the current number of values contained in the array.
.B "stdarr_empty"
indicates whether or not the array contains no values.

In order to support constant time access to any value, stdarr
allocates a contiguous block of memory in which it stores its sequence
of values. When a rank is referenced (see stdarr_get), an offset
from the base address of the allocated memory is calculated, which
gives the address of the value. Because of this block memory scheme,
when too many values are inserted to fit into the allocated memory,
the stdarr must allocate a new block of memory to contain the sequence
and move its sequence there.

Reallocating and copying a sequence of values is an expensive linear
O(n) time operation, where n is the number of values in the array. In
order to minimize the frequency of these operations, stdarr defaults
to using an auto-allocation mechanism that handles memory
allocation. When this mechanism is active, it allocates more memory
than the array currently needs so that every insertion and deletion
does not result in a reallocation. If the mechanism is active, then
.B "stdarr_high_capacity"
indicates the maximum number of values the array can contain before
being reallocated and
.B "stdarr_low_capacity"
indicates the minimum number of values the array can contain before
.B "possibly"
being reallocated. If the size of the array always remains between
these two numbers, then the array will never be reallocated by the
auto-allocation mechanism.

Oftentimes the programmer will want to control the allocation of the
array's memory manually. For this reason, the programmer can activate
or deactivate the auto-allocation mechanism by passing, respectively,
.I "stdtrue"
or
.I "stdfalse"
to
.BR "stdarr_set_auto_alloc" .
The programmer can query if the auto-allocation mechanism is currently
active by calling
.BR "stdarr_get_auto_alloc" .
While the auto-allocation mechanism is disabled, the current memory
allocation of the array is fixed and no size affecting operations
(insert, pop, resize, etc.) will result in reallocations. In this
case, it is the user's responsibility to ensure that there is enough
memory to contain the values stored in the array.
.B "stdarr_high_capacity"
indicates the maximum number of values an array can legally contain in
its current allocation.

Because stdarr stores its values in contiguous memory it provides
fast stack operations (push and pop) onto the end of the
sequence. Push operations run in linear O(m) time, where m is the
number of elements being pushed. Pop operations run in constant O(1)
time. If a stack operation causes an auto-reallocation then it runs in
linear O(n) time.
.B "stdarr_push_back"
pushes the referenced value onto the end of the array.
.B "stdarr_pop_back"
pops the last value off of the end of the array.
.B "stdarr_multi_push_back" 
appends an array of 
.I "num_push"
values onto the end of the stdarr.
.B "stdarr_multi_pop_back"
pops the last
.I "num_pop"
values off of the end of the array.

Because stdarr stores its values in contiguous memory it provides
slow list operations (insert and erase) on the sequence in worst case
linear O(n) time. These functions are very expensive and are only
provided as a convenience. If the user performs list operations often,
then another data structure (such as stddll) should probably be
considered.
.B "stdarr_insert"
inserts the referenced value into the sequence immediately before the
value that the iterator
.I "it"
references. The passed iterator is set to point at the inserted
value. All of the old values after the insertion point have their
rank in the sequence incremented by one.
.B "stdarr_multi_insert"
inserts an array of
.I "num_insert" 
values into the array immediately before the value that the iterator
.I "it" 
references. The passed iterator is set to point at the first value of
the inserted values. All of the old values after the insertion point
have their rank in the sequence incremented by
.IR "num_insert" .
.B "stdarr_repeat_insert"
inserts the referenced value into the sequence
.I "num_times"
times immediately before the value that
.I "it"
references. The passed iterator is set to point at the first value of
the inserted values. All of the old values after the insertion point
have their rank in the sequence incremented by
.IR "num_times" .

.B "stdarr_erase"
erases the value that
.I "it"
references. All of the remaining values after the erased value have
their rank in the sequence decremented by one. The passed iterator is
set to point at the value that shifted into the erased position, or
end if none.
.B "stdarr_multi_erase"
erases the contiguous increasing subsequence of 
.I "num_erase"
values starting at and including the rank/value that
.I "it"
references. All of the remaining values after the erased subsequence
have their rank in the sequence decremented by
.IR "num_erase" .
The passed iterator is set to point at the value that shifted into the
beginning position of the erased subsequence, or end if none. All of
the list operations return a pointer to the passed iterator to allow
for function composition.

Stdarr also has several resizing and capacity (allocation) features.
.B "stdarr_resize"
resizes the array to contain 
.I "num_elems"
values. If 
.I "num_elems"
is smaller than the current size of the array, then this will truncate
the sequence to only contain the first
.I "num_elems"
values in the array. If 
.I "num_elems"
is larger than the current size of the array, then additional
uninitialized values will be added to the end of the sequence of
values. 
.B "stdarr_clear"
deletes all of the values contained in the sequence.
.B "stdarr_set_capacity"
sets the high capacity of the array to be 
.IR "num_elems" , 
which will usually require a re-allocation. This function is often
used when the user has turned off the auto-allocation mechanism and
wants to set the size of memory allocated to the array manually.
.B "stdarr_reserve"
reserves enough memory space to contain
.I "num_elems"
values; if the auto-allocation mechanism is disabled this function
has the same effect as
.BR "stdarr_set_capacity" .
.B "stdarr_shrink_fit"
makes the capacity of the array the same as the size of the array so
that there is no unused allocated memory. This operation will usually
require a re-allocation.

stdarr, like the other stdutil data structures, has several methods
for getting iterators that reference particular values in its
sequence. stdarr provides random-access iterators (see std_it).
.B "stdarr_begin"
sets the iterator 
.I "it"
to reference the first or 0th value of the array, or, if the array is
empty to reference the end of the array.
.B "stdarr_end"
sets the iterator to reference the end of the array. The end of the
array is one past the last value contained in the array and has a
sequence rank of n.
.B "stdarr_last"
sets the iterator to reference the nth value in the sequence (rank of
n-1). It is illegal to call stdarr_last on an empty array.
.B "stdarr_get"
sets the iterator to reference the value with rank
.I "elem_num" 
or end if 
.I "elem_num" 
is n.
.I "elem_num"
must be less than or equal to n. All of these functions return
pointers to the passed iterator to allow function composition. All of
these functions work in constant O(1) time.

.B "stdarr_max_size"
returns the absolute maximum number of values of a particular size an
array can hold. As an array's size approaches this number (within a
small multiplicative factor) the auto-allocation mechanism may begin
to fail because it tries to allocate too much memory. If an array
needs to be able to hold somewhere around this many values, then the
user should disable the auto-allocation mechanism and manually control
the capacity of the array.

.B "stdarr_val_size"
returns the size, in bytes, of the value type this array is currently
containing.

.SH "RETURN VALUES"

Most of the functions' return values are described in the SYNOPSIS and
cannot fail. However, the constructors and functions that potentially
affect the capacity of the array can fail. If such a function returns
an int, then it returns zero on success and non-zero on failure. If
such a function returns a stdarr_it *, then it returns non-zero on
success and null(0) on failure. Whenever any stdarr function fails it
has no side effects.

.SH "ERRORS"

The constructor functions can return the following error codes:
.RS
.TP
.B "STD_ILLEGAL_PARAM" 
the sizeof the value type was zero.

.TP
.B "STD_MEM_FAILURE"
a memory allocation failure occurred.
.RE

Functions that potentially affect the capacity of the array and return
an int, return the following error codes on error:
.RS
.TP
.B "STD_MEM_FAILURE"
a memory allocation failure occurred.
.RE

.SH "NOTES"

For performance reasons, by default the stdutil library does no usage
checking. It assumes the programmer knows what s/he is doing and
doesn't want additional overhead incurred from sanity checks.

However, the library can be built will several types of checks,
including bounds and initialization checks that can catch many common
programming mistakes. See the README file included with the stdutil
library distribution to see how to create such a "checked" or debug
library.

.SH "AUTHOR"

John Schultz <jschultz@cnds.jhu.edu>

.SH "SEE ALSO"

std_it, stdcarr, stddll
